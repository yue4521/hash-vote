# .github/workflows/security.yml
name: Security Checks

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]  # mainブランチへのpushのみ
  schedule:
    - cron: '0 0 * * 1'  # 毎週月曜日 09:00 JST (UTC 00:00)

permissions:
  actions: read
  contents: read
  security-events: write

jobs:
  vulnerability-scan:
    name: 依存関係脆弱性スキャン
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pip-audit
          
      - name: Run pip-audit
        run: |
          pip-audit --format=json --output=audit-results.json || echo "Vulnerabilities found"
          pip-audit --format=cyclonedx-json --output=sbom.json || echo "SBOM generation completed"
        
      - name: Upload audit results
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-results
          path: |
            audit-results.json
            sbom.json
        if: always()

  bandit-security-check:
    name: Banditセキュリティ解析
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install Bandit
        run: pip install bandit[toml]
        
      - name: Run Bandit
        run: |
          bandit -r . -f json -o bandit-report.json || echo "Security issues found"
          bandit -r . -f txt || echo "Bandit analysis completed"
        
      - name: Upload Bandit results
        uses: actions/upload-artifact@v4
        with:
          name: bandit-security-report
          path: bandit-report.json
        if: always()

  secret-scan:
    name: Secret検出スキャン
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Run TruffleHog OSS (Push Event)
        if: github.event_name == 'push'
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          extra_args: --debug --only-verified
          
      - name: Run TruffleHog OSS (Pull Request Event)
        if: github.event_name == 'pull_request'
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.pull_request.base.sha }}
          head: HEAD
          extra_args: --debug --only-verified
          
      - name: Run TruffleHog OSS (Schedule Event)
        if: github.event_name == 'schedule'
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          extra_args: --debug --only-verified

  static-analysis:
    name: 静的解析（Semgrep）
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Semgrep
        run: pip install semgrep
        
      - name: Run Semgrep Security Rules
        run: |
          semgrep --config=auto --json --output=semgrep-results.json . || echo "Security findings detected"
          semgrep --config=auto . || echo "Semgrep analysis completed"
        
      - name: Upload Semgrep results
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-security-results
          path: semgrep-results.json
        if: always()

  license-check:
    name: ライセンスチェック
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          
      - name: Install dependencies and license-checker
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pip-licenses
          
      - name: Generate license report
        run: |
          pip-licenses --format=json --output-file=license-report.json --with-description --with-license-file --no-license-path || echo "License scan completed"
          pip-licenses --format=csv --output-file=license-report.csv || echo "License CSV generated"
          pip-licenses || echo "License summary generated"
        
      - name: Check for incompatible licenses
        run: |
          python -c "
          import json
          import os
          if not os.path.exists('license-report.json'):
              print('License report file not found, skipping license check')
              exit(0)
          with open('license-report.json', 'r') as f:
              licenses = json.load(f)
          
          # 問題のあるライセンス（例: GPL系）
          problematic = ['GPL', 'AGPL', 'LGPL']
          issues = []
          
          for pkg in licenses:
              license_name = pkg.get('License', 'Unknown')
              if any(prob in license_name for prob in problematic):
                  issues.append(f\"Package: {pkg['Name']} - License: {license_name}\")
          
          if issues:
              print('Potentially problematic licenses found:')
              for issue in issues:
                  print(f'  - {issue}')
              exit(1)
          else:
              print('No problematic licenses detected')
          "
        
      - name: Upload license reports
        uses: actions/upload-artifact@v4
        with:
          name: license-reports
          path: |
            license-report.json
            license-report.csv
        if: always()

  security-summary:
    name: セキュリティサマリー
    runs-on: ubuntu-latest
    needs: [vulnerability-scan, bandit-security-check, secret-scan, static-analysis, license-check]
    if: always()
    steps:
      - uses: actions/checkout@v4
      
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: security-reports
        continue-on-error: true
        
      - name: Generate security summary
        run: |
          echo "# セキュリティチェック結果" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| チェック項目 | ステータス | 重要度 |" >> $GITHUB_STEP_SUMMARY
          echo "|-------------|-----------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| 依存関係脆弱性スキャン | ${{ needs.vulnerability-scan.result == 'success' && 'OK 通過' || 'NG 要確認' }} | 高 |" >> $GITHUB_STEP_SUMMARY
          echo "| Banditセキュリティ解析 | ${{ needs.bandit-security-check.result == 'success' && 'OK 通過' || 'NG 要確認' }} | 中 |" >> $GITHUB_STEP_SUMMARY
          echo "| Secret検出スキャン | ${{ needs.secret-scan.result == 'success' && 'OK 通過' || 'NG 要確認' }} | 高 |" >> $GITHUB_STEP_SUMMARY
          echo "| 静的解析（Semgrep） | ${{ needs.static-analysis.result == 'success' && 'OK 通過' || 'NG 要確認' }} | 中 |" >> $GITHUB_STEP_SUMMARY
          echo "| ライセンスチェック | ${{ needs.license-check.result == 'success' && 'OK 通過' || 'NG 要確認' }} | 低 |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 重要度説明" >> $GITHUB_STEP_SUMMARY
          echo "- **高**: セキュリティ上の重大なリスクを含む可能性" >> $GITHUB_STEP_SUMMARY
          echo "- **中**: セキュリティベストプラクティスに関する問題" >> $GITHUB_STEP_SUMMARY
          echo "- **低**: コンプライアンスやライセンス関連の問題" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "詳細な結果は各ジョブのログとアーティファクトを確認してください。" >> $GITHUB_STEP_SUMMARY
          
      - name: Check for critical failures
        run: |
          critical_failures=0
          
          if [ "${{ needs.vulnerability-scan.result }}" != "success" ]; then
            echo "::error::Critical: 依存関係脆弱性スキャンで問題が検出されました"
            critical_failures=$((critical_failures + 1))
          fi
          
          if [ "${{ needs.secret-scan.result }}" != "success" ]; then
            echo "::error::Critical: Secretスキャンで問題が検出されました"
            critical_failures=$((critical_failures + 1))
          fi
          
          if [ $critical_failures -gt 0 ]; then
            echo "::error::Critical security issues detected. Workflow will fail."
            exit 1
          else
            echo "::notice::All critical security checks passed"
          fi